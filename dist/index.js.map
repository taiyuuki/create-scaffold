{"version":3,"sources":["../src/index.ts","../src/utils.ts"],"sourcesContent":["import fglob from 'fast-glob'\r\nimport getTemplateCompiler from 'lodash/template'\r\nimport { resolve, extname } from 'path'\r\nimport { readFileSync, writeFileSync } from 'fs'\r\nimport { ensureFileSync, copySync } from 'fs-extra'\r\nimport { replaceSpace } from './utils'\r\n\r\nexport const createProject = function <T extends  { output: string }>(templateFolder: string, options: T) {\r\n  const files = fglob.sync(['**/*'], { cwd: templateFolder, dot: true })\r\n  for (const rawPath of files) {\r\n    const ext = extname(rawPath)\r\n    const targetRelativePath = rawPath.split('/').map(name => {\r\n      if (name.endsWith('.ejs')) {\r\n        name = name.slice(0, name.length - 4)\r\n      }\r\n      return name\r\n    }).join('/')\r\n\r\n    const targetPath = resolve(options.output, targetRelativePath)\r\n    const sourcePath = resolve(templateFolder, rawPath)\r\n\r\n    ensureFileSync(targetPath)\r\n    if (ext === '.ejs') {\r\n      const rawContent = readFileSync(sourcePath, 'utf-8')\r\n      const templateCompile = getTemplateCompiler(rawContent, { 'interpolate': /<%=([\\s\\S]+?)%>/g })\r\n      const newContent = targetPath.endsWith('.json') ? JSON.stringify(JSON.parse(templateCompile(options)), null, 2) : templateCompile(options)\r\n      writeFileSync(targetPath, replaceSpace(newContent), 'utf-8')\r\n    }\r\n    else {\r\n      copySync(sourcePath, targetPath)\r\n    }\r\n  }\r\n}","export const replaceSpace = (str: string) => {\r\n  return str.replace(/[ \\f\\r\\t\\v]+\\n/g, '\\n').replace(/\\n[\\n]+\\n/g, '\\n').replace(/\\[\\s+\\]/g, '[]').replace(/{\\s+}/g, '{}')\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAkB;AAClB,sBAAgC;AAChC,kBAAiC;AACjC,gBAA4C;AAC5C,sBAAyC;;;ACJlC,IAAM,eAAe,CAAC,QAAgB;AAC3C,SAAO,IAAI,QAAQ,mBAAmB,IAAI,EAAE,QAAQ,cAAc,IAAI,EAAE,QAAQ,YAAY,IAAI,EAAE,QAAQ,UAAU,IAAI;AAC1H;;;ADKO,IAAM,gBAAgB,SAAyC,gBAAwB,SAAY;AACxG,QAAM,QAAQ,iBAAAA,QAAM,KAAK,CAAC,MAAM,GAAG,EAAE,KAAK,gBAAgB,KAAK,KAAK,CAAC;AACrE,aAAW,WAAW,OAAO;AAC3B,UAAM,UAAM,qBAAQ,OAAO;AAC3B,UAAM,qBAAqB,QAAQ,MAAM,GAAG,EAAE,IAAI,UAAQ;AACxD,UAAI,KAAK,SAAS,MAAM,GAAG;AACzB,eAAO,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA,MACtC;AACA,aAAO;AAAA,IACT,CAAC,EAAE,KAAK,GAAG;AAEX,UAAM,iBAAa,qBAAQ,QAAQ,QAAQ,kBAAkB;AAC7D,UAAM,iBAAa,qBAAQ,gBAAgB,OAAO;AAElD,wCAAe,UAAU;AACzB,QAAI,QAAQ,QAAQ;AAClB,YAAM,iBAAa,wBAAa,YAAY,OAAO;AACnD,YAAM,sBAAkB,gBAAAC,SAAoB,YAAY,EAAE,eAAe,mBAAmB,CAAC;AAC7F,YAAM,aAAa,WAAW,SAAS,OAAO,IAAI,KAAK,UAAU,KAAK,MAAM,gBAAgB,OAAO,CAAC,GAAG,MAAM,CAAC,IAAI,gBAAgB,OAAO;AACzI,mCAAc,YAAY,aAAa,UAAU,GAAG,OAAO;AAAA,IAC7D,OACK;AACH,oCAAS,YAAY,UAAU;AAAA,IACjC;AAAA,EACF;AACF;","names":["fglob","getTemplateCompiler"]}